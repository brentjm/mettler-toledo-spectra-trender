"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_opcua_binary_stream_1 = require("node-opcua-binary-stream");
const node_opcua_extension_object_1 = require("node-opcua-extension-object");
const node_opcua_factory_1 = require("node-opcua-factory");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_variant_1 = require("node-opcua-variant");
function resolveDynamicExtensionObject(variant, extraDataType) {
    return __awaiter(this, void 0, void 0, function* () {
        if (variant.dataType !== node_opcua_variant_1.DataType.ExtensionObject) {
            return;
        }
        if (!(variant.value instanceof node_opcua_extension_object_1.OpaqueStructure)) {
            return;
        }
        const opaque = variant.value;
        const namespaceUri = extraDataType.namespaceArray[opaque.nodeId.namespace];
        const exapndedNodeId = node_opcua_nodeid_1.ExpandedNodeId.fromNodeId(opaque.nodeId, namespaceUri);
        const object = node_opcua_factory_1.constructObject(exapndedNodeId);
        const stream = new node_opcua_binary_stream_1.BinaryStream(opaque.buffer);
        object.decode(stream);
        variant.value = object;
    });
}
exports.resolveDynamicExtensionObject = resolveDynamicExtensionObject;
//# sourceMappingURL=resolve_dynamic_extension_object.js.map