"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module node-opcua-schemas
 */
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_extension_object_1 = require("node-opcua-extension-object");
const node_opcua_factory_1 = require("node-opcua-factory");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const debugLog = node_opcua_debug_1.make_debugLog(__filename);
const doDebug = node_opcua_debug_1.checkDebugFlag(__filename);
function getOrCreateConstructor(fieldType, typeDictionary, encodingDefaultBinary, encodingDefaultXml) {
    if (node_opcua_factory_1.hasStructuredType(fieldType)) {
        return node_opcua_factory_1.getStructureTypeConstructor(fieldType);
    }
    const schema = typeDictionary.structuredTypes[fieldType];
    // istanbul ignore next
    if (!schema) {
        throw new Error("Unknown type in dictionary" + fieldType);
    }
    const constructor = createDynamicObject(schema, typeDictionary);
    if (encodingDefaultBinary && encodingDefaultBinary.value !== 0) {
        schema.encodingDefaultBinary = encodingDefaultBinary;
        schema.encodingDefaultXml = encodingDefaultXml;
        constructor.encodingDefaultBinary = encodingDefaultBinary;
        constructor.encodingDefaultXml = encodingDefaultXml;
        // istanbul ignore next
        if (doDebug) {
            debugLog("registering class definition , ", fieldType, encodingDefaultBinary.toString());
        }
        node_opcua_factory_1.registerClassDefinition(fieldType, constructor);
    }
    else {
        node_opcua_factory_1.registerFactory(fieldType, constructor);
    }
    return constructor;
}
exports.getOrCreateConstructor = getOrCreateConstructor;
function encodeArrayOrElement(field, obj, stream, encodeFunc) {
    if (field.isArray) {
        const array = obj[field.name];
        if (!array) {
            stream.writeUInt32(0xFFFFFFFF);
        }
        else {
            stream.writeUInt32(array.length);
            for (const e of array) {
                if (encodeFunc) {
                    encodeFunc(e, stream);
                }
                else {
                    e.encode(stream);
                }
            }
        }
    }
    else {
        if (encodeFunc) {
            encodeFunc(obj[field.name], stream);
        }
        else {
            if (!obj[field.name].encode) {
                // tslint:disable:no-console
                console.log(obj.schema.fields, field);
                throw new Error("encodeArrayOrElement: object field "
                    + field.name + " has no encode method and encodeFunc is missing");
            }
            obj[field.name].encode(stream);
        }
    }
}
function decodeArrayOrElement(field, obj, stream, decodeFunc) {
    if (field.isArray) {
        const array = [];
        const nbElements = stream.readUInt32();
        if (nbElements === 0xFFFFFFFF) {
            obj[field.name] = null;
        }
        else {
            for (let i = 0; i < nbElements; i++) {
                if (decodeFunc) {
                    array.push(decodeFunc(stream));
                }
                else {
                    // construct an instance
                    const constructor = node_opcua_factory_1.getStructureTypeConstructor(field.fieldType);
                    const element = new constructor({});
                    element.decode(stream);
                    array.push(element);
                }
            }
            obj[field.name] = array;
        }
    }
    else {
        if (decodeFunc) {
            obj[field.name] = decodeFunc(stream);
        }
        else {
            obj[field.name].decode(stream);
        }
    }
}
class DynamicExtensionObject extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options, schema, typeDictionary) {
        node_opcua_assert_1.assert(schema, "expecting a schema here ");
        node_opcua_assert_1.assert(typeDictionary, "expecting a typeDic");
        super(options);
        options = options || {};
        this.__schema = schema;
        node_opcua_factory_1.check_options_correctness_against_schema(this, this.schema, options);
        // finding fields that are in options but not in schema!
        for (const field of this.schema.fields) {
            const name = field.name;
            // dealing with optional fields
            if (field.switchBit !== undefined && options[field.name] === undefined) {
                this[name] = undefined;
                continue;
            }
            switch (field.category) {
                case node_opcua_factory_1.FieldCategory.complex: {
                    const constuctor = getOrCreateConstructor(field.fieldType, typeDictionary) || node_opcua_factory_1.BaseUAObject;
                    if (field.isArray) {
                        this[name] = (options[name] || []).map((x) => constuctor ? new constuctor(x) : null);
                    }
                    else {
                        this[name] = constuctor ? new constuctor(options[name]) : null;
                    }
                    // xx processStructuredType(fieldSchema);
                    break;
                }
                case node_opcua_factory_1.FieldCategory.enumeration:
                case node_opcua_factory_1.FieldCategory.basic:
                    if (field.isArray) {
                        this[name] = node_opcua_factory_1.initialize_field_array(field, options[name]);
                    }
                    else {
                        this[name] = node_opcua_factory_1.initialize_field(field, options[name]);
                    }
                    break;
            }
        }
    }
    encode(stream) {
        super.encode(stream);
        // ============ Deal with switchBits
        if (this.schema.bitFields && this.schema.bitFields.length) {
            let bitField = 0;
            for (const field of this.schema.fields) {
                if (field.switchBit === undefined) {
                    continue;
                }
                if (this[field.name] === undefined) {
                    continue;
                }
                // tslint:disable-next-line:no-bitwise
                bitField |= (1 << field.switchBit);
            }
            // write
            stream.writeUInt32(bitField);
        }
        for (const field of this.schema.fields) {
            // ignore
            if (field.switchBit !== undefined && this[field.name] === undefined) {
                continue;
            }
            switch (field.category) {
                case node_opcua_factory_1.FieldCategory.complex:
                    encodeArrayOrElement(field, this, stream);
                    break;
                case node_opcua_factory_1.FieldCategory.enumeration:
                case node_opcua_factory_1.FieldCategory.basic:
                    encodeArrayOrElement(field, this, stream, field.schema.encode);
                    break;
                default:
                    /* istanbul ignore next*/
                    throw new Error("Invalid category " + field.category + " " + node_opcua_factory_1.FieldCategory[field.category]);
            }
        }
    }
    decode(stream) {
        super.decode(stream);
        // ============ Deal with switchBits
        let bitField = 0;
        if (this.schema.bitFields && this.schema.bitFields.length) {
            bitField = stream.readUInt32();
        }
        for (const field of this.schema.fields) {
            // ignore fields that have a switch bit when bit is not set
            if (field.switchBit !== undefined) {
                // tslint:disable-next-line:no-bitwise
                if ((bitField & (1 << field.switchBit)) === 0) {
                    this[field.name] = undefined;
                    continue;
                }
            }
            switch (field.category) {
                case node_opcua_factory_1.FieldCategory.complex:
                    decodeArrayOrElement(field, this, stream);
                    break;
                case node_opcua_factory_1.FieldCategory.enumeration:
                case node_opcua_factory_1.FieldCategory.basic:
                    decodeArrayOrElement(field, this, stream, field.schema.decode);
                    break;
                default:
                    /* istanbul ignore next*/
                    throw new Error("Invalid category " + field.category + " " + node_opcua_factory_1.FieldCategory[field.category]);
            }
        }
    }
    get schema() {
        return this.__schema;
    }
}
function createDynamicObject(schema, typeDictionary) {
    // tslint:disable-next-line:max-classes-per-file
    class EXTENSION extends DynamicExtensionObject {
        constructor(options) {
            super(options, schema, typeDictionary);
            node_opcua_assert_1.assert(this.schema === schema);
        }
        toString() {
            return super.toString();
        }
    }
    EXTENSION.encodingDefaultXml = new node_opcua_nodeid_1.ExpandedNodeId(node_opcua_nodeid_1.NodeIdType.NUMERIC, 0, 0);
    EXTENSION.encodingDefaultBinary = new node_opcua_nodeid_1.ExpandedNodeId(node_opcua_nodeid_1.NodeIdType.NUMERIC, 0, 0);
    EXTENSION.possibleFields = schema.fields.map((x) => x.name);
    EXTENSION.schema = schema;
    // to do : may be remove DataType suffix here ?
    Object.defineProperty(EXTENSION, "name", { value: schema.name });
    return EXTENSION;
}
exports.createDynamicObject = createDynamicObject;
//# sourceMappingURL=dynamic_extension_object.js.map